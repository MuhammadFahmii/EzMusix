openapi: 3.0.0
info:
  description: |
    This is rest api that can useful to manage our favourite musix. This api consume musixmatch to get all musix data
  version: "1.0.0"
  title: Ez Musix
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/MuhammadFahmii/Ez_musix/1.0.0
tags:
  - name: users
    description: Operations about User
  - name: user
    description: Operations about user
paths:
  /users/login:
    post:
      tags:
        - users
      summary: Add a new users
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object    
                properties:      
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "successful"
                  data:
                    type: object    
                    properties:                
                      username:
                        type: integer
                        example: fahmi
                      token:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5'
        '404':
          description: User not found
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        $ref: '#/components/requestBodies/Users'
  /users/register:
    post:
      tags:
        - users
      summary: Register user
      description: For register new user.
      responses:
        '200':
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              type: object    
              properties:      
                status:
                  type: integer
                  example: 200
                message:
                  type: string
                  example: "successful"
                data:
                  type: object    
                  properties:                
                    username:
                      type: integer
                      example: fahmi
        description: Created user object
        required: true
  /users:
    get:
      tags:
        - users
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:      
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "successful"
                  data:
                    type: array
                    items:
                      type: object
                      properties:                
                        id:
                          type: integer
                          example: 1
                        username:
                          type: string
                          example: 'heinz'
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
  requestBodies:
    Users:
      content:
        application/json:
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
              password:
                type: string
      description: Users object that needs to be added to the System
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header