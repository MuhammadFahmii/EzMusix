// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import tracks "EzMusix/bussiness/tracks"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddTrackPlaylist provides a mock function with given fields: _a0, _a1
func (_m *Repository) AddTrackPlaylist(_a0 tracks.TrackPlaylist, _a1 tracks.Domain) (tracks.Domain, error) {
	ret := _m.Called(_a0, _a1)

	var r0 tracks.Domain
	if rf, ok := ret.Get(0).(func(tracks.TrackPlaylist, tracks.Domain) tracks.Domain); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(tracks.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tracks.TrackPlaylist, tracks.Domain) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrackPlaylist provides a mock function with given fields: playlistId, trackId
func (_m *Repository) DeleteTrackPlaylist(playlistId int, trackId int) (tracks.DeleteTrackPlaylist, error) {
	ret := _m.Called(playlistId, trackId)

	var r0 tracks.DeleteTrackPlaylist
	if rf, ok := ret.Get(0).(func(int, int) tracks.DeleteTrackPlaylist); ok {
		r0 = rf(playlistId, trackId)
	} else {
		r0 = ret.Get(0).(tracks.DeleteTrackPlaylist)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(playlistId, trackId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
