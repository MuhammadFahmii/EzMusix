// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import playlists "EzMusix/bussiness/playlists"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: playlist
func (_m *Repository) Delete(playlist playlists.Domain) (playlists.Domain, error) {
	ret := _m.Called(playlist)

	var r0 playlists.Domain
	if rf, ok := ret.Get(0).(func(playlists.Domain) playlists.Domain); ok {
		r0 = rf(playlist)
	} else {
		r0 = ret.Get(0).(playlists.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(playlists.Domain) error); ok {
		r1 = rf(playlist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: playlist
func (_m *Repository) Get(playlist playlists.Domain) ([]playlists.Domain, error) {
	ret := _m.Called(playlist)

	var r0 []playlists.Domain
	if rf, ok := ret.Get(0).(func(playlists.Domain) []playlists.Domain); ok {
		r0 = rf(playlist)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]playlists.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(playlists.Domain) error); ok {
		r1 = rf(playlist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: playlist
func (_m *Repository) Insert(playlist playlists.Domain) (playlists.Domain, error) {
	ret := _m.Called(playlist)

	var r0 playlists.Domain
	if rf, ok := ret.Get(0).(func(playlists.Domain) playlists.Domain); ok {
		r0 = rf(playlist)
	} else {
		r0 = ret.Get(0).(playlists.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(playlists.Domain) error); ok {
		r1 = rf(playlist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
